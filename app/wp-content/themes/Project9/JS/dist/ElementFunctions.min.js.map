{"version":3,"sources":["ElementFunctions.ts"],"names":["getElementCoordinates","element","elementTop","window","scrollY","getBoundingClientRect","top","elementBottom","clientHeight","elementLeft","scrollX","left","bottom","right","clientWidth","getElementIsAboveFold","innerHeight","getElementIsInViewportX","elementCoordinates","innerWidth","getElementIsInViewportY","getElementIsInViewport","getElementRelativeScrollY","elementIsAboveFold","elementRelativeScrollY","setElementEnterExit","enterExitType","getAttribute","classList","contains","remove","add","setElementParallax","parallaxParent","closest","windowWidthToHeightRatio","parentRelativeScroll","parallaxRateX","parallaxRateY","parallaxOffsetX","parallaxOffsetY","parallaxRateXValue","isNaN","parseFloat","parallaxRateYValue","parallaxValueX","parallaxValueY","style","transform","setBackgroundElementParallax"],"mappings":"AAQA,IAAMA,sBAAwE,SAACC,GAC3E,IAAMC,EAAsBC,OAAOC,QAAUH,EAAQI,wBAAwBC,IACvEC,EAAyBL,EAAaD,EAAQO,aAC9CC,EAAuBN,OAAOO,QAAUT,EAAQI,wBAAwBM,KAS9E,MAPgD,CAC5CL,IAASJ,EACTS,KAASF,EACTG,OAASL,EACTM,MAL0BJ,EAAcR,EAAQa,cAUlDC,sBAA6D,SAACd,GAGhE,QAFgDD,sBAAsBC,GAE/CK,IAAMH,OAAOa,cAIlCC,wBAA+D,SAAChB,GAClE,IAAMiB,EAA0ClB,sBAAsBC,GAEtE,QAAIiB,EAAmBP,KAAOR,OAAOO,QAAUP,OAAOgB,YAAcD,EAAmBL,MAAQV,OAAOO,UAIpGU,wBAA+D,SAACnB,GAClE,IAAMiB,EAA0ClB,sBAAsBC,GAEtE,QAAIiB,EAAmBZ,IAAMH,OAAOC,QAAUD,OAAOa,aAAeE,EAAmBN,OAAST,OAAOC,UAIrGiB,uBAA8D,SAACpB,GACjE,SAAKgB,wBAAwBhB,KAAamB,wBAAwBnB,KAIhEqB,0BAAuE,SAACrB,GAC1E,IAAKA,EAAW,OAAO,EAEvB,IAAMiB,EAA0ClB,sBAAsBC,GAChEsB,EAA+BR,sBAAsBd,GACvDuB,EAAkCrB,OAAOC,QAAUD,OAAOa,YAAcE,EAAmBZ,IAM/F,OAJIiB,IAAsBC,EAAyBrB,OAAOC,SAEtDD,OAAOC,QAAUD,OAAOa,YAAcE,EAAmBZ,IAAM,IAAKkB,EAAyB,GAE1FA,GAELC,oBAAwD,SAACxB,GAC3D,IAAMyB,EAAyBzB,EAAQ0B,aAAa,yBAA2B,GAE1D,SAAjBD,EAMiB,QAAjBA,IAMCN,wBAAwBnB,IAAaA,EAAQ2B,UAAUC,SAAS,YAAe5B,EAAQ2B,UAAUE,OAAO,WAEzGV,wBAAwBnB,KAAcA,EAAQ2B,UAAUC,SAAS,YAAc5B,EAAQ2B,UAAUG,IAAI,aAPhGX,wBAAwBnB,IAAYA,EAAQ2B,UAAUC,SAAS,YAAc5B,EAAQ2B,UAAUE,OAAO,WANvGV,wBAAwBnB,KAAaA,EAAQ2B,UAAUC,SAAS,YAAc5B,EAAQ2B,UAAUG,IAAI,YAiB1GC,mBAAuD,SAAC/B,GAC1D,IAAMgC,EAAsChC,EAAQiC,QAAQ,iBAAmB,KAE/E,GAAKD,EAAL,CAEA,IAAME,EAAoChC,OAAOgB,WAAahB,OAAOa,YAC/DoB,EAAgCd,0BAA0BW,GAE1DI,EAAyBpC,EAAQ0B,aAAa,yBAA2B,GACzEW,EAAyBrC,EAAQ0B,aAAa,yBAA2B,GACzEY,EAA2BtC,EAAQ0B,aAAa,2BAA6B,GAC7Ea,EAA2BvC,EAAQ0B,aAAa,2BAA6B,GAE7Ec,EAA+BC,MAAMC,WAAWN,IAA8C,EAA5BM,WAAWN,GAC7EO,EAA+BF,MAAMC,WAAWL,IAA8C,EAA5BK,WAAWL,GAG7EO,GAFiCH,MAAMC,WAAWJ,IAAkD,EAA9BI,WAAWJ,KAE/BE,EAAqBL,EAAuBD,GAC9FW,GAFiCJ,MAAMC,WAAWH,IAAkD,EAA9BG,WAAWH,IAE/BI,EAAqBR,EAE7EnC,EAAQ8C,MAAMC,UAAY,aAAeH,EAAiB,OAASC,EAAiB,QAIlFG,6BAAiE,SAAChD,GACpE,IAAMgC,EAAsChC,EAAQiC,QAAQ,0BAE5D,GAAKD,EAAL,CAEA,IAAMG,EAAgCd,0BAA0BW,GAC1DI,EAAyBpC,EAAQ0B,aAAa,yBAA2B,GACzEW,EAAyBrC,EAAQ0B,aAAa,yBAA2B,GAIzEkB,GAF+BH,MAAMC,WAAWN,IAA8C,EAA5BM,WAAWN,IAE9BD,EAC/CU,GAF+BJ,MAAMC,WAAWL,IAA8C,EAA5BK,WAAWL,IAE9BF,EAErDnC,EAAQ8C,MAAMC,UAAY,aAAeH,EAAiB,OAASC,EAAiB","file":"ElementFunctions.min.js","sourcesContent":["/* Element Functions */\r\ninterface elementCoordinates {\r\n    top    : number,\r\n    left   : number,\r\n    bottom : number,\r\n    right  : number\r\n}\r\n\r\nconst getElementCoordinates : (element : HTMLElement) => elementCoordinates = (element) => {\r\n    const elementTop : number = window.scrollY + element.getBoundingClientRect().top; //px\r\n    const elementBottom : number = elementTop + element.clientHeight; //px\r\n    const elementLeft : number = window.scrollX + element.getBoundingClientRect().left; //px\r\n    const elementRight : number = elementLeft + element.clientWidth; //px\r\n    const elementCoordinates : elementCoordinates = {\r\n        top    : elementTop,\r\n        left   : elementLeft,\r\n        bottom : elementBottom,\r\n        right  : elementRight \r\n    };\r\n\r\n    return elementCoordinates;\r\n}\r\nconst getElementIsAboveFold : (element : HTMLElement) => boolean = (element) => {\r\n    const elementCoordinates : elementCoordinates = getElementCoordinates(element);\r\n\r\n    if (elementCoordinates.top > window.innerHeight) { return false; }\r\n\r\n    return true;\r\n}\r\nconst getElementIsInViewportX : (element : HTMLElement) => boolean = (element) => {\r\n    const elementCoordinates : elementCoordinates = getElementCoordinates(element);\r\n\r\n    if (elementCoordinates.left > window.scrollX + window.innerWidth || elementCoordinates.right < window.scrollX) { return false; }\r\n\r\n    return true;\r\n}\r\nconst getElementIsInViewportY : (element : HTMLElement) => boolean = (element) => {\r\n    const elementCoordinates : elementCoordinates = getElementCoordinates(element);\r\n\r\n    if (elementCoordinates.top > window.scrollY + window.innerHeight || elementCoordinates.bottom < window.scrollY) {  return false; }\r\n\r\n    return true;\r\n}\r\nconst getElementIsInViewport : (element : HTMLElement) => boolean = (element) => {\r\n    if (!getElementIsInViewportX(element) || !getElementIsInViewportY(element)) {  return false; }\r\n\r\n    return true;\r\n}\r\nconst getElementRelativeScrollY : (element : HTMLElement | null) => number = (element) => {  \r\n    if (!element) { return 0; }\r\n\r\n    const elementCoordinates : elementCoordinates = getElementCoordinates(element);\r\n    const elementIsAboveFold : boolean = getElementIsAboveFold(element);\r\n    var elementRelativeScrollY : number = window.scrollY + window.innerHeight - elementCoordinates.top; //px\r\n\r\n    if (elementIsAboveFold) { elementRelativeScrollY = window.scrollY; }\r\n    \r\n    if (window.scrollY + window.innerHeight - elementCoordinates.top < 0) { elementRelativeScrollY = 0; }\r\n\r\n    return elementRelativeScrollY;\r\n}\r\nconst setElementEnterExit : (element : HTMLElement) => void = (element) => {    \r\n    const enterExitType : string = element.getAttribute(\"data-enter-exit-type\") || \"\";\r\n\r\n    if (enterExitType == \"enter\") {\r\n        if (getElementIsInViewportY(element) && !element.classList.contains(\"entered\")) { element.classList.add(\"entered\"); }\r\n\r\n        return;\r\n    }\r\n\r\n    if (enterExitType == \"exit\") {\r\n        if (!getElementIsInViewportY(element) && element.classList.contains(\"entered\")) { element.classList.remove(\"entered\"); }\r\n\r\n        return;\r\n    }\r\n\r\n    if (!getElementIsInViewportY(element) &&  element.classList.contains(\"entered\")) {  element.classList.remove(\"entered\"); }\r\n\r\n    if (getElementIsInViewportY(element) &&  !element.classList.contains(\"entered\")) { element.classList.add(\"entered\"); }\r\n\r\n    return;\r\n}\r\nconst setElementParallax : (element : HTMLElement) => void = (element) => {\r\n    const parallaxParent : HTMLElement | null = element.closest(\".hasParallax\") || null;\r\n\r\n    if (!parallaxParent) { return; }\r\n\r\n    const windowWidthToHeightRatio : number = window.innerWidth / window.innerHeight;\r\n    const parentRelativeScroll : number = getElementRelativeScrollY(parallaxParent); //px\r\n\r\n    const parallaxRateX : string = element.getAttribute(\"data-parallax-rate-x\") || \"\";\r\n    const parallaxRateY : string = element.getAttribute(\"data-parallax-rate-y\") || \"\";\r\n    const parallaxOffsetX : string = element.getAttribute(\"data-parallax-offset-x\") || \"\";\r\n    const parallaxOffsetY : string = element.getAttribute(\"data-parallax-offset-y\") || \"\";\r\n\r\n    const parallaxRateXValue : number = !isNaN(parseFloat(parallaxRateX)) ? parseFloat(parallaxRateX) : 0;\r\n    const parallaxRateYValue : number = !isNaN(parseFloat(parallaxRateY)) ? parseFloat(parallaxRateY) : 0;\r\n    const parallaxOffsetXValue : number = !isNaN(parseFloat(parallaxOffsetX)) ? parseFloat(parallaxOffsetX) : 0; //px\r\n    const parallaxOffsetYValue : number = !isNaN(parseFloat(parallaxOffsetY)) ? parseFloat(parallaxOffsetY) : 0; //px\r\n    const parallaxValueX : number = parallaxOffsetXValue + (parallaxRateXValue * parentRelativeScroll + windowWidthToHeightRatio); //px\r\n    const parallaxValueY : number = parallaxOffsetYValue + (parallaxRateYValue * parentRelativeScroll); //px\r\n    \r\n    element.style.transform = \"translate(\" + parallaxValueX + \"px, \" + parallaxValueY + \"px)\";\r\n\r\n    return;\r\n}\r\nconst setBackgroundElementParallax : (element : HTMLElement) => void = (element) => {\r\n    const parallaxParent : HTMLElement | null = element.closest(\".hasParallaxBackground\");\r\n\r\n    if (!parallaxParent) { return; }\r\n\r\n    const parentRelativeScroll : number = getElementRelativeScrollY(parallaxParent); //px\r\n    const parallaxRateX : string = element.getAttribute(\"data-parallax-rate-x\") || \"\";\r\n    const parallaxRateY : string = element.getAttribute(\"data-parallax-rate-y\") || \"\";\r\n    \r\n    const parallaxRateXValue : number = !isNaN(parseFloat(parallaxRateX)) ? parseFloat(parallaxRateX) : 0;\r\n    const parallaxRateYValue : number = !isNaN(parseFloat(parallaxRateY)) ? parseFloat(parallaxRateY) : 0;\r\n    const parallaxValueX : number = parallaxRateXValue * parentRelativeScroll; //px\r\n    const parallaxValueY : number = parallaxRateYValue * parentRelativeScroll; //px\r\n    \r\n    element.style.transform = \"translate(\" + parallaxValueX + \"px, \" + parallaxValueY + \"px)\";\r\n\r\n    return;\r\n}"]}