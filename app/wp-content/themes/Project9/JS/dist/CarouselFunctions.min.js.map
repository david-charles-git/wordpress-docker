{"version":3,"sources":["CarouselFunctions.ts"],"names":["setCarouselGridGap","carousels","document","getElementsByClassName","a","length","carouselInner","gridGap","getAttribute","gridGapValue","isNaN","parseFloat","style","setCarouselItemsMaxWidth","itemMaxWidth","itemMaxWidthValue","carouselItems","b","maxWidth","classList","add","setCarouselInitialShownItems","setCarouselShownItems","carousel","carouselMaxWidth","carouselMaxWidthValue","window","innerWidth","activeItem","activeItemCoordinates","getElementCoordinates","items","itemCoordinates","right","left","remove","handleCarouselButtonClick","eventTarget","event","currentTarget","target","closest","isLeftButton","contains","isRightButton","shiftCarouselLeft","shiftCarouselRight","stopCarouselAutoShift","handleCarouselNavigationTabClick","tabIndex","tabIndexValue","parseInt","shiftCarouselToFrame","handleCarouselTouchStart","touchX","touches","clientX","globalCarouselTouchX","handleCarouselTouchEnd","changedTouches","handleAutoShiftCarousels","autoShift","handleCarouselOnResize","element","carsouselItems","newIndex","frame","carouselItemWidth","carouselGridGap","carouselGridGapValue","tabItems","clientWidth","transformXValue","transform","leftButton","setAttribute","carouselAutoShiftIntervalTime","carouselAutoShiftInterval","setInterval","addEventListener"],"mappings":"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","file":"CarouselFunctions.min.js","sourcesContent":["// Carousel Functions\r\nconst setCarouselGridGap : () => void = () => {\r\n    const carousels : any = document.getElementsByClassName(\"Carousel\");\r\n    \r\n    for (var a = 0; a < carousels.length; a++) {\r\n        const carouselInner : HTMLElement | null = carousels[a].getElementsByClassName(\"inner\")[0] || null;\r\n        const gridGap : string = carousels[a].getAttribute(\"data-carousel-grid-gap\") || \"\";\r\n        const gridGapValue : number = !isNaN(parseFloat(gridGap)) ? parseFloat(gridGap) : 0; //px\r\n        \r\n        if (!carouselInner) { continue; }\r\n\r\n        carouselInner.style.gridGap = gridGapValue + \"px\";\r\n\r\n        continue;\r\n    }\r\n\r\n    return;\r\n}\r\nconst setCarouselItemsMaxWidth : () => void = () => {\r\n    const carousels : any = document.getElementsByClassName(\"Carousel\");\r\n\r\n    for (var a : number = 0; a < carousels.length; a++) {\r\n        const itemMaxWidth : string = carousels[a].getAttribute(\"data-carousel-item-max-width\") || \"\";\r\n        const itemMaxWidthValue : number = !isNaN(parseFloat(itemMaxWidth)) ? parseFloat(itemMaxWidth) : 400; //px\r\n        const carouselItems : any = carousels[a].getElementsByClassName(\"item\");\r\n\r\n        for (var b : number = 0; b < carouselItems.length; b++) {\r\n            carouselItems[b].style.maxWidth = itemMaxWidthValue + \"px\";\r\n        }\r\n\r\n        carousels[a].classList.add(\"carouselSet\");\r\n    }\r\n\r\n    return;\r\n}\r\nconst setCarouselInitialShownItems : () => void = () => {\r\n    const carousels : any = document.getElementsByClassName(\"Carousel\");\r\n\r\n    for (var a= 0; a < carousels.length; a++) {\r\n        setCarouselShownItems(carousels[a]);\r\n    }\r\n    \r\n    return;\r\n}\r\nconst setCarouselShownItems : (carousel : HTMLElement) => void = (carousel) => {\r\n    const carouselMaxWidth : string = carousel.getAttribute(\"data-carousel-max-width\") || \"\";\r\n    var carouselMaxWidthValue : number = !isNaN(parseFloat(carouselMaxWidth)) ? parseFloat(carouselMaxWidth) : 0; //px\r\n    \r\n    if (carouselMaxWidthValue > window.innerWidth) { carouselMaxWidthValue = window.innerWidth; }\r\n\r\n    const activeItem : any = carousel.getElementsByClassName(\"item active\")[0] || null;\r\n    \r\n    if (!activeItem) { return; }\r\n\r\n    const activeItemCoordinates : elementCoordinates = getElementCoordinates(activeItem);\r\n    \r\n    if (!activeItemCoordinates) { return; }\r\n\r\n    const items : any = carousel.getElementsByClassName(\"item\");\r\n\r\n    for (var a = 0; a < items.length; a++) {\r\n        if (items[a] == activeItem) { continue; }\r\n\r\n        const itemCoordinates : elementCoordinates = getElementCoordinates(items[a]);\r\n\r\n        if (!itemCoordinates) { continue; }\r\n\r\n        if (itemCoordinates.right < activeItemCoordinates.left) { items[a].classList.remove(\"showing\"); continue; }\r\n        \r\n        if (itemCoordinates.right > carouselMaxWidthValue + activeItemCoordinates.left) { items[a].classList.remove(\"showing\"); continue; }\r\n\r\n        items[a].classList.add(\"showing\");\r\n    }\r\n\r\n    return;\r\n}\r\n\r\nconst handleCarouselButtonClick : () => void = () => {\r\n    const eventTarget : any = event.currentTarget || event.target;\r\n\r\n    if (!eventTarget) { return; }\r\n\r\n    const carousel : any = eventTarget.closest(\".Carousel\");\r\n\r\n    if (!carousel) { return; }\r\n\r\n    const isLeftButton : boolean = eventTarget.classList.contains(\"left\");\r\n    const isRightButton : boolean = eventTarget.classList.contains(\"right\");\r\n\r\n    if (isLeftButton) { shiftCarouselLeft(eventTarget); }\r\n\r\n    if (isRightButton) { shiftCarouselRight(eventTarget); }\r\n\r\n    stopCarouselAutoShift(carousel);\r\n\r\n    return;\r\n}\r\nconst handleCarouselNavigationTabClick : () => void = () => {\r\n    const eventTarget : any = event.currentTarget || event.target;\r\n\r\n    if (!eventTarget) { return; }\r\n\r\n    const carousel : any = eventTarget.closest(\".Carousel\");\r\n\r\n    if (!carousel) { return; }\r\n\r\n    const tabIndex : string = eventTarget.getAttribute(\"data-id\") || \"\";\r\n    const tabIndexValue : number = !isNaN(parseInt(tabIndex)) ? parseInt(tabIndex) : 0;\r\n\r\n    shiftCarouselToFrame(carousel, tabIndexValue);\r\n    stopCarouselAutoShift(carousel);\r\n\r\n    return;\r\n}\r\nconst handleCarouselTouchStart : () => void = () => {\r\n    const eventTarget : any = event.currentTarget || event.target;\r\n\r\n    if (!eventTarget) { return; }\r\n\r\n    const carousel : any = eventTarget.closest(\".Carousel\");\r\n\r\n    if (!carousel) { return; }\r\n\r\n    const touchX : number = event.touches[0].clientX || 0; //px\r\n\r\n    stopCarouselAutoShift(carousel);\r\n\r\n    globalCarouselTouchX = touchX;\r\n\r\n    return;\r\n}\r\nconst handleCarouselTouchEnd : () => void = () => {\r\n    const eventTarget : any = event.currentTarget || event.target;\r\n    \r\n    if (!eventTarget) { return; }\r\n\r\n    const touchX : number = event.changedTouches[0].clientX || 0; //px\r\n    \r\n    if (globalCarouselTouchX > touchX) { shiftCarouselRight(eventTarget); }\r\n    \r\n    if (globalCarouselTouchX < touchX) { shiftCarouselLeft(eventTarget); }\r\n\r\n    globalCarouselTouchX = 0; //px\r\n\r\n    return;\r\n}\r\nconst handleAutoShiftCarousels : () => void = () => {\r\n    const carousels : any = document.getElementsByClassName(\"Carousel\");\r\n\r\n    for (var a = 0; a < carousels.length; a++) {\r\n        const autoShift : string = carousels[a].getAttribute(\"data-carousel-auto-scroll\");\r\n        const carouselInner : any = carousels[a].getElementsByClassName(\"inner\")[0];\r\n\r\n        if (autoShift == \"true\" && carouselInner) { shiftCarouselRight(carouselInner); }\r\n    }\r\n\r\n    return;\r\n}\r\nconst handleCarouselOnResize : () => void = () => {\r\n    const carousels : any = document.getElementsByClassName(\"Carousel\");\r\n\r\n    for (var a : number = 0; a < carousels.length; a++) {\r\n        shiftCarouselToFrame(carousels[a], 0);\r\n        stopCarouselAutoShift(carousels[a]);\r\n        setCarouselShownItems(carousels[a]);\r\n    }\r\n\r\n    return;\r\n}\r\n\r\nconst shiftCarouselLeft : (element : HTMLElement) => void = (element) => {\r\n    if (!element) { return; }\r\n\r\n    const carousel : any = element.closest(\".Carousel\");\r\n\r\n    if (!carousel) { return; }\r\n\r\n    const carsouselItems : any = carousel.getElementsByClassName(\"item\");\r\n\r\n    for (var a : number = 0; a < carsouselItems.length; a++) {\r\n        if (carsouselItems[a].classList.contains(\"active\")) {\r\n            const newIndex : number = a - 1 < 0 ? carsouselItems.length - 1 : a - 1;\r\n\r\n            shiftCarouselToFrame(carousel, newIndex);\r\n\r\n            return;\r\n        }\r\n    }\r\n\r\n    return;\r\n}\r\nconst shiftCarouselRight : (element : HTMLElement) => void = (element) => {\r\n    if (!element) { return; }\r\n\r\n    const carousel : any = element.closest(\".Carousel\");\r\n\r\n    if (!carousel) { return; }\r\n\r\n    const carsouselItems : any = carousel.getElementsByClassName(\"item\");\r\n\r\n    for (var a : number = 0; a < carsouselItems.length; a++) {\r\n        if (carsouselItems[a].classList.contains(\"active\")) {\r\n            const newIndex : number = a + 1 >= carsouselItems.length ? 0 : a + 1;\r\n\r\n            shiftCarouselToFrame(carousel, newIndex);\r\n\r\n            return;\r\n        }\r\n    }\r\n\r\n    return;\r\n}\r\nconst shiftCarouselToFrame : (carousel : HTMLElement, frame : number) => void = (carousel, frame) => {\r\n    if (!carousel) { return; }\r\n\r\n    frame = frame || 0;\r\n\r\n    const carouselInner : any = carousel.getElementsByClassName(\"inner\")[0];\r\n\r\n    if (!carouselInner) { return; }\r\n\r\n    var carouselItemWidth : number = 0; //px\r\n    const carouselGridGap : string = carousel.getAttribute(\"data-carousel-grid-gap\") || \"\";\r\n    const carouselGridGapValue : number = !isNaN(parseFloat(carouselGridGap)) ? parseFloat(carouselGridGap) : 0; //px\r\n    const carsouselItems : any = carousel.getElementsByClassName(\"item\");\r\n    const tabItems : any = carousel.getElementsByClassName(\"tab\");\r\n\r\n    for (var a = 0; a < carsouselItems.length; a++) {\r\n        if (carsouselItems[a].classList.contains(\"active\")) { carouselItemWidth = carsouselItems[a].clientWidth + carouselGridGapValue; /*px*/ }\r\n        \r\n        carsouselItems[a].classList.remove(\"active\");\r\n    }\r\n\r\n    for (var a = 0; a < tabItems.length; a++) {\r\n        tabItems[a].classList.remove(\"active\");\r\n    }\r\n\r\n    const transformXValue : number = (-1) * frame * carouselItemWidth; //px\r\n\r\n    carouselInner.style.transform = \"translateX(\" + transformXValue + \"px)\";\r\n    carsouselItems[frame].classList.add(\"active\");\r\n    tabItems[frame].classList.add(\"active\");\r\n\r\n    setCarouselShownItems(carousel);\r\n\r\n    const leftButton : any = carousel.getElementsByClassName(\"carouselButton left\")[0];\r\n\r\n    if (!leftButton) { return; }\r\n\r\n    if (frame == 0) { leftButton.classList.remove(\"active\"); return; }\r\n\r\n    leftButton.classList.add(\"active\");\r\n\r\n    return;\r\n}\r\n\r\nconst stopCarouselAutoShift : (carousel : HTMLElement) => void = (carousel) => {\r\n    carousel.setAttribute(\"data-carousel-auto-scroll\", \"false\");\r\n\r\n    return;\r\n}\r\n\r\nvar globalCarouselTouchX : number = 0; //px\r\nconst carouselAutoShiftIntervalTime : number = 5000; //ms\r\nconst carouselAutoShiftInterval : number = setInterval(handleAutoShiftCarousels, carouselAutoShiftIntervalTime);\r\n\r\nwindow.addEventListener(\"load\", () => { setCarouselGridGap(); setCarouselItemsMaxWidth(); setCarouselInitialShownItems(); });\r\nwindow.addEventListener(\"resize\", () => { handleCarouselOnResize(); });"]}